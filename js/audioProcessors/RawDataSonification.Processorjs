class RawDataSonificationProcessor extends AudioWorkletProcessor {
    constructor() {
        super();
    }

    /**
     * Creates the grains as specified by the parameters and record them into a buffer, then play it.
     * @param {int} numChannels 
     * @param {*} parameters 
     */

    static get parameterDescriptors() {
        return [
            {
                name: "gain",
                defaultValue: 0.5,
                minValue: 0,
                maxValue: 1
            },
            {
                name: "frequency",
                defaultValue: 440.0,
                minValue: 27.5,
                maxValue: 4186.009
            },
            {
                name: "attack",
                defaultValue: 0.01,
                minValue: 0,
                maxValue: 1
            },
            {
                name: "sustain",
                defaultValue: 0.5,
                minValue: 0,
                maxValue: 1
            },
            {
                name: "release",
                defaultValue: 0.1,
                minValue: 0,
                maxValue: 1
            },
            {
                name: "detune",
                defaultValue: 0.0,
                minValue: -1,
                maxValue: 1
            },
        ];
    }

    // Per il momento non ci occupiamo di spazzializzare i segnali
    // input list is an array of 128 floats
    process(inputList, outputList, parameters) {

        var numChannels = inputList[0].length;

        // CREATE A DIFFERENT GRAIN FOR EACH CHANNEL AND STORE THEM IN this.multiChannelBuffer
        this.createGrains(numChannels, parameters);

        console.log('Processing inputList: ' + inputList);
        console.log('Processing outputList: ' + outputList);

        const sourceLimit = Math.min(inputList.length, outputList.length);
        
        // GAIN MUST BE PUT HERE SINCE INPUT MUST BE NORMALIZED
        const gain = parameters.gain;

        for (let inputNum = 0; inputNum < sourceLimit; inputNum++) {
            let input = inputList[inputNum];
            let output = outputList[0];
            let channelCount = Math.min(input.length, output.length);

            for (let channelNum = 0; channelNum < channelCount; channelNum++) {
                let sampleCount = input[channelNum].length;

                for (let i = 0; i < sampleCount; i++) {
                let sample = output[channelNum][i] + input[channelNum][i];

                if (sample > 1.0) {
                    sample = 1.0;
                } else if (sample < -1.0) {
                    sample = -1.0;
                }

                output[channelNum][i] = sample * gain;
                }
            }
        }

        return true;
    }

}

registerProcessor('raw-data-sonification-processor', RawDataSonificationProcessor)
